1. Create a Dictionary from Two Lists
Combine two lists into a dictionary, where one list holds the keys and the other holds the values.

keys = ['name', 'age', 'city']
values = ['Alice', 30, 'New York']

my_dict = dict(zip(keys, values))
print(my_dict)


2. Check for Anagram
Check if two strings are anagrams (i.e., they contain the same characters but in a different order).

def are_anagrams(str1, str2):
    return sorted(str1) == sorted(str2)

str1 = input("Enter the first string: ")
str2 = input("Enter the second string: ")

if are_anagrams(str1, str2):
    print(f"{str1} and {str2} are anagrams.")
else:
    print(f"{str1} and {str2} are not anagrams.")


3. Find the Missing Number in a List
Given a list containing numbers from 1 to n, find the missing number.

def find_missing_number(lst, n):
    total = n * (n + 1) // 2
    sum_of_lst = sum(lst)
    return total - sum_of_lst

nums = [1, 2, 4, 5, 6]
n = 6
print(f"Missing number: {find_missing_number(nums, n)}")


4. Sort a List of Tuples by Second Element
Sort a list of tuples based on the second element in each tuple.

my_list = [(1, 'apple'), (3, 'banana'), (2, 'cherry')]
sorted_list = sorted(my_list, key=lambda x: x[1])
print(sorted_list)


5. Remove Duplicates from a List
Write a program that removes duplicates from a list without using set().

def remove_duplicates(lst):
    unique_lst = []
    for item in lst:
        if item not in unique_lst:
            unique_lst.append(item)
    return unique_lst

my_list = [1, 2, 2, 3, 4, 4, 5]
print(remove_duplicates(my_list))


6. Flatten a Nested List
Given a nested list, write a function to flatten it (i.e., convert it into a one-dimensional list).

def flatten(nested_list):
    flat_list = []
    for item in nested_list:
        if isinstance(item, list):
            flat_list.extend(flatten(item))
        else:
            flat_list.append(item)
    return flat_list

nested_list = [1, [2, [3, 4], 5], 6]
print(flatten(nested_list))


7. Merge Two Sorted Lists
Given two sorted lists, merge them into a single sorted list.

def merge_sorted_lists(list1, list2):
    result = []
    i, j = 0, 0
    while i < len(list1) and j < len(list2):
        if list1[i] < list2[j]:
            result.append(list1[i])
            i += 1
        else:
            result.append(list2[j])
            j += 1
    result.extend(list1[i:])
    result.extend(list2[j:])
    return result

list1 = [1, 3, 5, 7]
list2 = [2, 4, 6, 8]
print(merge_sorted_lists(list1, list2))


8. Find Common Elements in Two Lists
Write a function that returns a list of common elements between two lists.

def common_elements(lst1, lst2):
    return [elem for elem in lst1 if elem in lst2]

list1 = [1, 2, 3, 4, 5]
list2 = [4, 5, 6, 7, 8]
print(common_elements(list1, list2))


9. Count Frequency of Elements in a List
Count how many times each element appears in a list.

from collections import Counter

my_list = ['apple', 'banana', 'apple', 'orange', 'banana', 'banana']
frequency = Counter(my_list)
print(frequency)


10. File Handling - Write and Read a File
Create a text file, write to it, and then read its contents.

# Writing to a file
with open('sample.txt', 'w') as file:
    file.write("Hello, World!\n")
    file.write("This is a second line.\n")

# Reading from a file
with open('sample.txt', 'r') as file:
    content = file.read()
    print(content)


11. Student Grades: Average, Min, Max
Calculate the average, minimum, and maximum grades for a student.

def calculate_grades(grades):
    avg = sum(grades) / len(grades)
    min_grade = min(grades)
    max_grade = max(grades)
    return avg, min_grade, max_grade

grades = [85, 90, 88, 92, 80]
avg, min_grade, max_grade = calculate_grades(grades)
print(f"Average: {avg}, Min: {min_grade}, Max: {max_grade}")


12. Implement Binary Search
Implement the binary search algorithm to find an element in a sorted list.

def binary_search(lst, target):
    left, right = 0, len(lst) - 1
    while left <= right:
        mid = (left + right) // 2
        if lst[mid] == target:
            return mid
        elif lst[mid] < target:
            left = mid + 1
        else:
            right = mid - 1
    return -1

sorted_list = [1, 3, 5, 7, 9, 11]
target = 7
result = binary_search(sorted_list, target)

if result != -1:
    print(f"Element {target} found at index {result}.")
else:
    print(f"Element {target} not found.")


13. Implement a Simple ATM System
Create a simple ATM system that allows a user to check balance, deposit money, or withdraw money.

class ATM:
    def __init__(self, balance):
        self.balance = balance

    def deposit(self, amount):
        self.balance += amount
        print(f"Deposited {amount}. New balance: {self.balance}")

    def withdraw(self, amount):
        if amount > self.balance:
            print("Insufficient funds!")
        else:
            self.balance -= amount
            print(f"Withdrew {amount}. New balance: {self.balance}")

    def check_balance(self):
        print(f"Current balance: {self.balance}")

atm = ATM(500)
while True:
    print("\nATM Menu")
    print("1. Deposit")
    print("2. Withdraw")
    print("3. Check Balance")
    print("4. Exit")
    choice = int(input("Choose an option: "))

    if choice == 1:
        amount = float(input("Enter deposit amount: "))
        atm.deposit(amount)
    elif choice == 2:
        amount = float(input("Enter withdrawal amount: "))
        atm.withdraw(amount)
    elif choice == 3:
        atm.check_balance()
    elif choice == 4:
        print("Exiting ATM. Goodbye!")
        break
    else:
        print("Invalid choice! Please try again.")


14. Matrix Multiplication
Multiply two matrices.

def matrix_multiply(A, B):
    result = [[0, 0], [0, 0]]
    for i in range(len(A)):
        for j in range(len(B[0])):
            for k in range(len(B)):
                result[i][j] += A[i][k] * B[k][j]
    return result

A = [[1, 2], [3, 4]]
B = [[5, 6], [7, 8]]
result = matrix_multiply(A, B)
print("Result of matrix multiplication:")
for row in result:
    print(row)


15. Create a Simple To-Do List (Using File Handling)
Create a to-do list that allows the user to add, remove, and view tasks.

def add_task(task):
    with open("todo_list.txt", "a") as file:
        file.write(task + "\n")

def remove_task(task):
    with open("todo_list.txt", "r") as file:
        tasks = file.readlines()

    with open("todo_list.txt", "w") as file:
        for line in tasks:
            if line.strip("\n") != task:


